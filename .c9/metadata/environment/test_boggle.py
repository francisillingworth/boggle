{"filter":false,"title":"test_boggle.py","tooltip":"/test_boggle.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":["3"],"id":182}],[{"start":{"row":27,"column":36},"end":{"row":28,"column":0},"action":"insert","lines":["",""],"id":183},{"start":{"row":28,"column":0},"end":{"row":28,"column":8},"action":"insert","lines":["        "]},{"start":{"row":28,"column":8},"end":{"row":28,"column":9},"action":"insert","lines":["s"]},{"start":{"row":28,"column":9},"end":{"row":28,"column":10},"action":"insert","lines":["e"]}],[{"start":{"row":28,"column":10},"end":{"row":28,"column":11},"action":"insert","lines":["l"],"id":184},{"start":{"row":28,"column":11},"end":{"row":28,"column":12},"action":"insert","lines":["f"]},{"start":{"row":28,"column":12},"end":{"row":28,"column":13},"action":"insert","lines":["."]},{"start":{"row":28,"column":13},"end":{"row":28,"column":14},"action":"insert","lines":["a"]},{"start":{"row":28,"column":14},"end":{"row":28,"column":15},"action":"insert","lines":["s"]},{"start":{"row":28,"column":15},"end":{"row":28,"column":16},"action":"insert","lines":["s"]},{"start":{"row":28,"column":16},"end":{"row":28,"column":17},"action":"insert","lines":["e"]},{"start":{"row":28,"column":17},"end":{"row":28,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":28,"column":18},"end":{"row":28,"column":19},"action":"insert","lines":["t"],"id":185},{"start":{"row":28,"column":19},"end":{"row":28,"column":20},"action":"insert","lines":["E"]},{"start":{"row":28,"column":20},"end":{"row":28,"column":21},"action":"insert","lines":["q"]},{"start":{"row":28,"column":21},"end":{"row":28,"column":22},"action":"insert","lines":["u"]},{"start":{"row":28,"column":22},"end":{"row":28,"column":23},"action":"insert","lines":["a"]},{"start":{"row":28,"column":23},"end":{"row":28,"column":24},"action":"insert","lines":["l"]}],[{"start":{"row":28,"column":24},"end":{"row":28,"column":26},"action":"insert","lines":["()"],"id":186}],[{"start":{"row":28,"column":25},"end":{"row":28,"column":26},"action":"insert","lines":["l"],"id":187},{"start":{"row":28,"column":26},"end":{"row":28,"column":27},"action":"insert","lines":["e"]},{"start":{"row":28,"column":27},"end":{"row":28,"column":28},"action":"insert","lines":["n"]}],[{"start":{"row":28,"column":28},"end":{"row":28,"column":30},"action":"insert","lines":["()"],"id":188}],[{"start":{"row":28,"column":29},"end":{"row":28,"column":30},"action":"insert","lines":["f"],"id":189}],[{"start":{"row":28,"column":29},"end":{"row":28,"column":30},"action":"remove","lines":["f"],"id":190}],[{"start":{"row":28,"column":29},"end":{"row":28,"column":30},"action":"insert","lines":["g"],"id":191},{"start":{"row":28,"column":30},"end":{"row":28,"column":31},"action":"insert","lines":["r"]},{"start":{"row":28,"column":31},"end":{"row":28,"column":32},"action":"insert","lines":["i"]},{"start":{"row":28,"column":32},"end":{"row":28,"column":33},"action":"insert","lines":["d"]}],[{"start":{"row":28,"column":34},"end":{"row":28,"column":35},"action":"insert","lines":[","],"id":192}],[{"start":{"row":28,"column":35},"end":{"row":28,"column":36},"action":"insert","lines":[" "],"id":193}],[{"start":{"row":28,"column":36},"end":{"row":28,"column":37},"action":"insert","lines":["6"],"id":194}],[{"start":{"row":27,"column":34},"end":{"row":27,"column":35},"action":"insert","lines":[" "],"id":195}],[{"start":{"row":17,"column":26},"end":{"row":17,"column":27},"action":"remove","lines":["r"],"id":196}],[{"start":{"row":0,"column":0},"end":{"row":28,"column":38},"action":"remove","lines":["import unittest","import boggle","","","class TestBoggle(unittest.TestCase):","    ","    \"\"\"","    Our test suite for boggel solver","    \"\"\"","    ","    ","    def test_can_create_an_empty_grid(self):","        ","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        ","        grid = boggle.make_grid(0,0)","        self.assertEqual(len(grid), 0)","        ","    def test_grid_size_is_width_times_height(self):","        ","        \"\"\"","        ","        Test to ensure that the total size og the grid is ","        equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)"],"id":197}],[{"start":{"row":0,"column":0},"end":{"row":30,"column":38},"action":"insert","lines":["import unittest","import boggle","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)"],"id":198}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["f"],"id":199},{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["r"]},{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"insert","lines":["o"]},{"start":{"row":2,"column":3},"end":{"row":2,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":[" "],"id":200},{"start":{"row":2,"column":5},"end":{"row":2,"column":6},"action":"insert","lines":["s"]},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["t"]},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["r"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["i"]},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["n"]},{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["g"]}],[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":[" "],"id":201},{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["i"]},{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["m"]},{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["p"]},{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["o"]},{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"insert","lines":["r"]},{"start":{"row":2,"column":17},"end":{"row":2,"column":18},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":18},"end":{"row":2,"column":19},"action":"insert","lines":["s"],"id":202}],[{"start":{"row":2,"column":19},"end":{"row":2,"column":20},"action":"insert","lines":[" "],"id":203},{"start":{"row":2,"column":20},"end":{"row":2,"column":21},"action":"insert","lines":["a"]},{"start":{"row":2,"column":21},"end":{"row":2,"column":22},"action":"insert","lines":["s"]},{"start":{"row":2,"column":22},"end":{"row":2,"column":23},"action":"insert","lines":["c"]},{"start":{"row":2,"column":23},"end":{"row":2,"column":24},"action":"insert","lines":["i"]}],[{"start":{"row":2,"column":24},"end":{"row":2,"column":25},"action":"insert","lines":["i"],"id":204},{"start":{"row":2,"column":25},"end":{"row":2,"column":26},"action":"insert","lines":["_"]},{"start":{"row":2,"column":26},"end":{"row":2,"column":27},"action":"insert","lines":["u"]},{"start":{"row":2,"column":27},"end":{"row":2,"column":28},"action":"insert","lines":["p"]},{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"insert","lines":["p"]},{"start":{"row":2,"column":29},"end":{"row":2,"column":30},"action":"insert","lines":["e"]},{"start":{"row":2,"column":30},"end":{"row":2,"column":31},"action":"insert","lines":["r"]},{"start":{"row":2,"column":31},"end":{"row":2,"column":32},"action":"insert","lines":["c"]},{"start":{"row":2,"column":32},"end":{"row":2,"column":33},"action":"insert","lines":["a"]},{"start":{"row":2,"column":33},"end":{"row":2,"column":34},"action":"insert","lines":["s"]}],[{"start":{"row":2,"column":34},"end":{"row":2,"column":35},"action":"insert","lines":["e"],"id":205}],[{"start":{"row":2,"column":18},"end":{"row":2,"column":19},"action":"remove","lines":["s"],"id":206}],[{"start":{"row":30,"column":38},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":207},{"start":{"row":31,"column":0},"end":{"row":31,"column":8},"action":"insert","lines":["        "]},{"start":{"row":31,"column":8},"end":{"row":32,"column":0},"action":"insert","lines":["",""]},{"start":{"row":32,"column":0},"end":{"row":32,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":32,"column":4},"end":{"row":32,"column":8},"action":"remove","lines":["    "],"id":208}],[{"start":{"row":32,"column":4},"end":{"row":32,"column":5},"action":"insert","lines":["d"],"id":209},{"start":{"row":32,"column":5},"end":{"row":32,"column":6},"action":"insert","lines":["e"]},{"start":{"row":32,"column":6},"end":{"row":32,"column":7},"action":"insert","lines":["f"]}],[{"start":{"row":32,"column":7},"end":{"row":32,"column":8},"action":"insert","lines":[" "],"id":210},{"start":{"row":32,"column":8},"end":{"row":32,"column":9},"action":"insert","lines":["t"]},{"start":{"row":32,"column":9},"end":{"row":32,"column":10},"action":"insert","lines":["e"]},{"start":{"row":32,"column":10},"end":{"row":32,"column":11},"action":"insert","lines":["s"]},{"start":{"row":32,"column":11},"end":{"row":32,"column":12},"action":"insert","lines":["t"]}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"insert","lines":["_"],"id":211}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"remove","lines":["_"],"id":212}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"insert","lines":["g"],"id":213},{"start":{"row":32,"column":13},"end":{"row":32,"column":14},"action":"insert","lines":["r"]},{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"insert","lines":["i"]},{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"insert","lines":["d"]}],[{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"remove","lines":["d"],"id":214},{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"remove","lines":["i"]},{"start":{"row":32,"column":13},"end":{"row":32,"column":14},"action":"remove","lines":["r"]},{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"remove","lines":["g"]}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"insert","lines":["_"],"id":215},{"start":{"row":32,"column":13},"end":{"row":32,"column":14},"action":"insert","lines":["g"]},{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"insert","lines":["r"]},{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"insert","lines":["i"]},{"start":{"row":32,"column":16},"end":{"row":32,"column":17},"action":"insert","lines":["d"]}],[{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"insert","lines":["_"],"id":216},{"start":{"row":32,"column":18},"end":{"row":32,"column":19},"action":"insert","lines":["i"]},{"start":{"row":32,"column":19},"end":{"row":32,"column":20},"action":"insert","lines":["s"]},{"start":{"row":32,"column":20},"end":{"row":32,"column":21},"action":"insert","lines":["_"]},{"start":{"row":32,"column":21},"end":{"row":32,"column":22},"action":"insert","lines":["f"]},{"start":{"row":32,"column":22},"end":{"row":32,"column":23},"action":"insert","lines":["i"]}],[{"start":{"row":32,"column":23},"end":{"row":32,"column":24},"action":"insert","lines":["l"],"id":217},{"start":{"row":32,"column":24},"end":{"row":32,"column":25},"action":"insert","lines":["l"]},{"start":{"row":32,"column":25},"end":{"row":32,"column":26},"action":"insert","lines":["e"]},{"start":{"row":32,"column":26},"end":{"row":32,"column":27},"action":"insert","lines":["d"]},{"start":{"row":32,"column":27},"end":{"row":32,"column":28},"action":"insert","lines":["_"]},{"start":{"row":32,"column":28},"end":{"row":32,"column":29},"action":"insert","lines":["w"]},{"start":{"row":32,"column":29},"end":{"row":32,"column":30},"action":"insert","lines":["i"]},{"start":{"row":32,"column":30},"end":{"row":32,"column":31},"action":"insert","lines":["t"]},{"start":{"row":32,"column":31},"end":{"row":32,"column":32},"action":"insert","lines":["h"]}],[{"start":{"row":32,"column":32},"end":{"row":32,"column":33},"action":"insert","lines":["_"],"id":218},{"start":{"row":32,"column":33},"end":{"row":32,"column":34},"action":"insert","lines":["l"]},{"start":{"row":32,"column":34},"end":{"row":32,"column":35},"action":"insert","lines":["e"]},{"start":{"row":32,"column":35},"end":{"row":32,"column":36},"action":"insert","lines":["t"]},{"start":{"row":32,"column":36},"end":{"row":32,"column":37},"action":"insert","lines":["t"]},{"start":{"row":32,"column":37},"end":{"row":32,"column":38},"action":"insert","lines":["e"]},{"start":{"row":32,"column":38},"end":{"row":32,"column":39},"action":"insert","lines":["r"]},{"start":{"row":32,"column":39},"end":{"row":32,"column":40},"action":"insert","lines":["s"]}],[{"start":{"row":32,"column":40},"end":{"row":32,"column":42},"action":"insert","lines":["()"],"id":219}],[{"start":{"row":32,"column":41},"end":{"row":32,"column":42},"action":"insert","lines":["s"],"id":220},{"start":{"row":32,"column":42},"end":{"row":32,"column":43},"action":"insert","lines":["e"]},{"start":{"row":32,"column":43},"end":{"row":32,"column":44},"action":"insert","lines":["l"]},{"start":{"row":32,"column":44},"end":{"row":32,"column":45},"action":"insert","lines":["f"]}],[{"start":{"row":32,"column":46},"end":{"row":32,"column":47},"action":"insert","lines":[":"],"id":221}],[{"start":{"row":32,"column":47},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":222},{"start":{"row":33,"column":0},"end":{"row":33,"column":8},"action":"insert","lines":["        "]},{"start":{"row":33,"column":8},"end":{"row":34,"column":0},"action":"insert","lines":["",""]},{"start":{"row":34,"column":0},"end":{"row":34,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":34,"column":8},"end":{"row":34,"column":10},"action":"insert","lines":["\"\""],"id":223}],[{"start":{"row":34,"column":10},"end":{"row":35,"column":0},"action":"insert","lines":["",""],"id":224},{"start":{"row":35,"column":0},"end":{"row":35,"column":8},"action":"insert","lines":["        "]},{"start":{"row":35,"column":8},"end":{"row":35,"column":9},"action":"insert","lines":["E"]},{"start":{"row":35,"column":9},"end":{"row":35,"column":10},"action":"insert","lines":["n"]},{"start":{"row":35,"column":10},"end":{"row":35,"column":11},"action":"insert","lines":["s"]},{"start":{"row":35,"column":11},"end":{"row":35,"column":12},"action":"insert","lines":["u"]},{"start":{"row":35,"column":12},"end":{"row":35,"column":13},"action":"insert","lines":["r"]},{"start":{"row":35,"column":13},"end":{"row":35,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":35,"column":14},"end":{"row":35,"column":15},"action":"insert","lines":[" "],"id":225},{"start":{"row":35,"column":15},"end":{"row":35,"column":16},"action":"insert","lines":["t"]},{"start":{"row":35,"column":16},"end":{"row":35,"column":17},"action":"insert","lines":["h"]},{"start":{"row":35,"column":17},"end":{"row":35,"column":18},"action":"insert","lines":["a"]},{"start":{"row":35,"column":18},"end":{"row":35,"column":19},"action":"insert","lines":["t"]}],[{"start":{"row":35,"column":19},"end":{"row":35,"column":20},"action":"insert","lines":[" "],"id":226},{"start":{"row":35,"column":20},"end":{"row":35,"column":21},"action":"insert","lines":["e"]},{"start":{"row":35,"column":21},"end":{"row":35,"column":22},"action":"insert","lines":["a"]},{"start":{"row":35,"column":22},"end":{"row":35,"column":23},"action":"insert","lines":["c"]},{"start":{"row":35,"column":23},"end":{"row":35,"column":24},"action":"insert","lines":["h"]}],[{"start":{"row":35,"column":24},"end":{"row":35,"column":25},"action":"insert","lines":[" "],"id":227},{"start":{"row":35,"column":25},"end":{"row":35,"column":26},"action":"insert","lines":["o"]},{"start":{"row":35,"column":26},"end":{"row":35,"column":27},"action":"insert","lines":["f"]}],[{"start":{"row":35,"column":27},"end":{"row":35,"column":28},"action":"insert","lines":[" "],"id":228},{"start":{"row":35,"column":28},"end":{"row":35,"column":29},"action":"insert","lines":["t"]},{"start":{"row":35,"column":29},"end":{"row":35,"column":30},"action":"insert","lines":["h"]},{"start":{"row":35,"column":30},"end":{"row":35,"column":31},"action":"insert","lines":["e"]}],[{"start":{"row":35,"column":31},"end":{"row":35,"column":32},"action":"insert","lines":[" "],"id":229},{"start":{"row":35,"column":32},"end":{"row":35,"column":33},"action":"insert","lines":["c"]},{"start":{"row":35,"column":33},"end":{"row":35,"column":34},"action":"insert","lines":["o"]},{"start":{"row":35,"column":34},"end":{"row":35,"column":35},"action":"insert","lines":["o"]},{"start":{"row":35,"column":35},"end":{"row":35,"column":36},"action":"insert","lines":["r"]},{"start":{"row":35,"column":36},"end":{"row":35,"column":37},"action":"insert","lines":["d"]},{"start":{"row":35,"column":37},"end":{"row":35,"column":38},"action":"insert","lines":["i"]},{"start":{"row":35,"column":38},"end":{"row":35,"column":39},"action":"insert","lines":["n"]},{"start":{"row":35,"column":39},"end":{"row":35,"column":40},"action":"insert","lines":["a"]},{"start":{"row":35,"column":40},"end":{"row":35,"column":41},"action":"insert","lines":["t"]},{"start":{"row":35,"column":41},"end":{"row":35,"column":42},"action":"insert","lines":["e"]}],[{"start":{"row":35,"column":42},"end":{"row":35,"column":43},"action":"insert","lines":["s"],"id":230}],[{"start":{"row":35,"column":43},"end":{"row":35,"column":44},"action":"insert","lines":[" "],"id":231},{"start":{"row":35,"column":44},"end":{"row":35,"column":45},"action":"insert","lines":["i"]},{"start":{"row":35,"column":45},"end":{"row":35,"column":46},"action":"insert","lines":["n"]}],[{"start":{"row":35,"column":46},"end":{"row":35,"column":47},"action":"insert","lines":[" "],"id":232},{"start":{"row":35,"column":47},"end":{"row":35,"column":48},"action":"insert","lines":["t"]},{"start":{"row":35,"column":48},"end":{"row":35,"column":49},"action":"insert","lines":["h"]},{"start":{"row":35,"column":49},"end":{"row":35,"column":50},"action":"insert","lines":["e"]}],[{"start":{"row":35,"column":50},"end":{"row":35,"column":51},"action":"insert","lines":[" "],"id":233},{"start":{"row":35,"column":51},"end":{"row":35,"column":52},"action":"insert","lines":["g"]},{"start":{"row":35,"column":52},"end":{"row":35,"column":53},"action":"insert","lines":["r"]},{"start":{"row":35,"column":53},"end":{"row":35,"column":54},"action":"insert","lines":["i"]},{"start":{"row":35,"column":54},"end":{"row":35,"column":55},"action":"insert","lines":["a"]}],[{"start":{"row":35,"column":54},"end":{"row":35,"column":55},"action":"remove","lines":["a"],"id":234}],[{"start":{"row":35,"column":54},"end":{"row":35,"column":55},"action":"insert","lines":["d"],"id":235}],[{"start":{"row":35,"column":55},"end":{"row":35,"column":56},"action":"insert","lines":[" "],"id":236},{"start":{"row":35,"column":56},"end":{"row":36,"column":0},"action":"insert","lines":["",""]},{"start":{"row":36,"column":0},"end":{"row":36,"column":8},"action":"insert","lines":["        "]},{"start":{"row":36,"column":8},"end":{"row":36,"column":9},"action":"insert","lines":["c"]},{"start":{"row":36,"column":9},"end":{"row":36,"column":10},"action":"insert","lines":["o"]},{"start":{"row":36,"column":10},"end":{"row":36,"column":11},"action":"insert","lines":["n"]}],[{"start":{"row":36,"column":11},"end":{"row":36,"column":12},"action":"insert","lines":["t"],"id":237},{"start":{"row":36,"column":12},"end":{"row":36,"column":13},"action":"insert","lines":["a"]},{"start":{"row":36,"column":13},"end":{"row":36,"column":14},"action":"insert","lines":["i"]},{"start":{"row":36,"column":14},"end":{"row":36,"column":15},"action":"insert","lines":["n"]},{"start":{"row":36,"column":15},"end":{"row":36,"column":16},"action":"insert","lines":["s"]}],[{"start":{"row":36,"column":16},"end":{"row":36,"column":17},"action":"insert","lines":[" "],"id":238},{"start":{"row":36,"column":17},"end":{"row":36,"column":18},"action":"insert","lines":["l"]},{"start":{"row":36,"column":18},"end":{"row":36,"column":19},"action":"insert","lines":[";"]},{"start":{"row":36,"column":19},"end":{"row":36,"column":20},"action":"insert","lines":["e"]}],[{"start":{"row":36,"column":19},"end":{"row":36,"column":20},"action":"remove","lines":["e"],"id":239},{"start":{"row":36,"column":18},"end":{"row":36,"column":19},"action":"remove","lines":[";"]}],[{"start":{"row":36,"column":18},"end":{"row":36,"column":19},"action":"insert","lines":["e"],"id":240},{"start":{"row":36,"column":19},"end":{"row":36,"column":20},"action":"insert","lines":["t"]},{"start":{"row":36,"column":20},"end":{"row":36,"column":21},"action":"insert","lines":["t"]},{"start":{"row":36,"column":21},"end":{"row":36,"column":22},"action":"insert","lines":["e"]},{"start":{"row":36,"column":22},"end":{"row":36,"column":23},"action":"insert","lines":["r"]},{"start":{"row":36,"column":23},"end":{"row":36,"column":24},"action":"insert","lines":["s"]}],[{"start":{"row":34,"column":10},"end":{"row":34,"column":11},"action":"insert","lines":["\""],"id":241}],[{"start":{"row":36,"column":24},"end":{"row":37,"column":0},"action":"insert","lines":["",""],"id":242},{"start":{"row":37,"column":0},"end":{"row":37,"column":8},"action":"insert","lines":["        "]},{"start":{"row":37,"column":8},"end":{"row":38,"column":0},"action":"insert","lines":["",""]},{"start":{"row":38,"column":0},"end":{"row":38,"column":8},"action":"insert","lines":["        "]},{"start":{"row":38,"column":8},"end":{"row":38,"column":9},"action":"insert","lines":["\""]},{"start":{"row":38,"column":9},"end":{"row":38,"column":10},"action":"insert","lines":["\""]},{"start":{"row":38,"column":10},"end":{"row":38,"column":11},"action":"insert","lines":["\""]}],[{"start":{"row":38,"column":11},"end":{"row":39,"column":0},"action":"insert","lines":["",""],"id":243},{"start":{"row":39,"column":0},"end":{"row":39,"column":8},"action":"insert","lines":["        "]},{"start":{"row":39,"column":8},"end":{"row":40,"column":0},"action":"insert","lines":["",""]},{"start":{"row":40,"column":0},"end":{"row":40,"column":8},"action":"insert","lines":["        "]},{"start":{"row":40,"column":8},"end":{"row":40,"column":9},"action":"insert","lines":["g"]},{"start":{"row":40,"column":9},"end":{"row":40,"column":10},"action":"insert","lines":["r"]},{"start":{"row":40,"column":10},"end":{"row":40,"column":11},"action":"insert","lines":["i"]}],[{"start":{"row":40,"column":11},"end":{"row":40,"column":12},"action":"insert","lines":["d"],"id":244}],[{"start":{"row":40,"column":12},"end":{"row":40,"column":13},"action":"insert","lines":[" "],"id":245},{"start":{"row":40,"column":13},"end":{"row":40,"column":14},"action":"insert","lines":["="]}],[{"start":{"row":40,"column":14},"end":{"row":40,"column":15},"action":"insert","lines":[" "],"id":246},{"start":{"row":40,"column":15},"end":{"row":40,"column":16},"action":"insert","lines":[" "]},{"start":{"row":40,"column":16},"end":{"row":40,"column":17},"action":"insert","lines":["b"]},{"start":{"row":40,"column":17},"end":{"row":40,"column":18},"action":"insert","lines":["o"]}],[{"start":{"row":40,"column":17},"end":{"row":40,"column":18},"action":"remove","lines":["o"],"id":247},{"start":{"row":40,"column":16},"end":{"row":40,"column":17},"action":"remove","lines":["b"]},{"start":{"row":40,"column":15},"end":{"row":40,"column":16},"action":"remove","lines":[" "]}],[{"start":{"row":40,"column":15},"end":{"row":40,"column":16},"action":"insert","lines":["b"],"id":248},{"start":{"row":40,"column":16},"end":{"row":40,"column":17},"action":"insert","lines":["o"]},{"start":{"row":40,"column":17},"end":{"row":40,"column":18},"action":"insert","lines":["g"]},{"start":{"row":40,"column":18},"end":{"row":40,"column":19},"action":"insert","lines":["g"]},{"start":{"row":40,"column":19},"end":{"row":40,"column":20},"action":"insert","lines":["l"]},{"start":{"row":40,"column":20},"end":{"row":40,"column":21},"action":"insert","lines":["r"]}],[{"start":{"row":40,"column":21},"end":{"row":40,"column":22},"action":"insert","lines":["."],"id":249},{"start":{"row":40,"column":22},"end":{"row":40,"column":23},"action":"insert","lines":["m"]},{"start":{"row":40,"column":23},"end":{"row":40,"column":24},"action":"insert","lines":["a"]},{"start":{"row":40,"column":24},"end":{"row":40,"column":25},"action":"insert","lines":["k"]},{"start":{"row":40,"column":25},"end":{"row":40,"column":26},"action":"insert","lines":["e"]}],[{"start":{"row":40,"column":25},"end":{"row":40,"column":26},"action":"remove","lines":["e"],"id":250},{"start":{"row":40,"column":24},"end":{"row":40,"column":25},"action":"remove","lines":["k"]},{"start":{"row":40,"column":23},"end":{"row":40,"column":24},"action":"remove","lines":["a"]},{"start":{"row":40,"column":22},"end":{"row":40,"column":23},"action":"remove","lines":["m"]},{"start":{"row":40,"column":21},"end":{"row":40,"column":22},"action":"remove","lines":["."]},{"start":{"row":40,"column":20},"end":{"row":40,"column":21},"action":"remove","lines":["r"]}],[{"start":{"row":40,"column":20},"end":{"row":40,"column":21},"action":"insert","lines":["e"],"id":251},{"start":{"row":40,"column":21},"end":{"row":40,"column":22},"action":"insert","lines":["."]}],[{"start":{"row":40,"column":22},"end":{"row":40,"column":23},"action":"insert","lines":["m"],"id":252},{"start":{"row":40,"column":23},"end":{"row":40,"column":24},"action":"insert","lines":["a"]},{"start":{"row":40,"column":24},"end":{"row":40,"column":25},"action":"insert","lines":["k"]},{"start":{"row":40,"column":25},"end":{"row":40,"column":26},"action":"insert","lines":["e"]},{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"insert","lines":["_"]}],[{"start":{"row":40,"column":27},"end":{"row":40,"column":28},"action":"insert","lines":["g"],"id":253},{"start":{"row":40,"column":28},"end":{"row":40,"column":29},"action":"insert","lines":["r"]},{"start":{"row":40,"column":29},"end":{"row":40,"column":30},"action":"insert","lines":["i"]},{"start":{"row":40,"column":30},"end":{"row":40,"column":31},"action":"insert","lines":["d"]}],[{"start":{"row":40,"column":31},"end":{"row":40,"column":33},"action":"insert","lines":["()"],"id":254}],[{"start":{"row":40,"column":32},"end":{"row":40,"column":33},"action":"insert","lines":["2"],"id":255},{"start":{"row":40,"column":33},"end":{"row":40,"column":34},"action":"insert","lines":["."]},{"start":{"row":40,"column":34},"end":{"row":40,"column":35},"action":"insert","lines":["4"]}],[{"start":{"row":40,"column":34},"end":{"row":40,"column":35},"action":"remove","lines":["4"],"id":256}],[{"start":{"row":40,"column":34},"end":{"row":40,"column":35},"action":"insert","lines":["3"],"id":257}],[{"start":{"row":40,"column":34},"end":{"row":40,"column":35},"action":"insert","lines":[" "],"id":258}],[{"start":{"row":40,"column":33},"end":{"row":40,"column":34},"action":"remove","lines":["."],"id":259}],[{"start":{"row":40,"column":33},"end":{"row":40,"column":34},"action":"insert","lines":[","],"id":260}],[{"start":{"row":40,"column":37},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":261},{"start":{"row":41,"column":0},"end":{"row":41,"column":8},"action":"insert","lines":["        "]},{"start":{"row":41,"column":8},"end":{"row":42,"column":0},"action":"insert","lines":["",""]},{"start":{"row":42,"column":0},"end":{"row":42,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":42,"column":4},"end":{"row":42,"column":8},"action":"remove","lines":["    "],"id":262},{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"remove","lines":["    "]},{"start":{"row":41,"column":8},"end":{"row":42,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"insert","lines":["f"],"id":263},{"start":{"row":41,"column":9},"end":{"row":41,"column":10},"action":"insert","lines":["o"]},{"start":{"row":41,"column":10},"end":{"row":41,"column":11},"action":"insert","lines":["r"]}],[{"start":{"row":41,"column":11},"end":{"row":41,"column":12},"action":"insert","lines":[" "],"id":264},{"start":{"row":41,"column":12},"end":{"row":41,"column":13},"action":"insert","lines":["l"]},{"start":{"row":41,"column":13},"end":{"row":41,"column":14},"action":"insert","lines":["e"]},{"start":{"row":41,"column":14},"end":{"row":41,"column":15},"action":"insert","lines":["t"]},{"start":{"row":41,"column":15},"end":{"row":41,"column":16},"action":"insert","lines":["t"]},{"start":{"row":41,"column":16},"end":{"row":41,"column":17},"action":"insert","lines":["e"]},{"start":{"row":41,"column":17},"end":{"row":41,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":41,"column":18},"end":{"row":41,"column":19},"action":"insert","lines":[" "],"id":265},{"start":{"row":41,"column":19},"end":{"row":41,"column":20},"action":"insert","lines":["i"]},{"start":{"row":41,"column":20},"end":{"row":41,"column":21},"action":"insert","lines":["n"]}],[{"start":{"row":41,"column":21},"end":{"row":41,"column":22},"action":"insert","lines":[" "],"id":266},{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"insert","lines":["g"]},{"start":{"row":41,"column":23},"end":{"row":41,"column":24},"action":"insert","lines":["r"]},{"start":{"row":41,"column":24},"end":{"row":41,"column":25},"action":"insert","lines":["i"]},{"start":{"row":41,"column":25},"end":{"row":41,"column":26},"action":"insert","lines":["d"]},{"start":{"row":41,"column":26},"end":{"row":41,"column":27},"action":"insert","lines":["."]}],[{"start":{"row":41,"column":27},"end":{"row":41,"column":28},"action":"insert","lines":["v"],"id":267},{"start":{"row":41,"column":28},"end":{"row":41,"column":29},"action":"insert","lines":["a"]},{"start":{"row":41,"column":29},"end":{"row":41,"column":30},"action":"insert","lines":["l"]},{"start":{"row":41,"column":30},"end":{"row":41,"column":31},"action":"insert","lines":["u"]},{"start":{"row":41,"column":31},"end":{"row":41,"column":32},"action":"insert","lines":["e"]},{"start":{"row":41,"column":32},"end":{"row":41,"column":33},"action":"insert","lines":["s"]}],[{"start":{"row":41,"column":33},"end":{"row":41,"column":35},"action":"insert","lines":["()"],"id":268}],[{"start":{"row":41,"column":35},"end":{"row":41,"column":36},"action":"insert","lines":[":"],"id":269}],[{"start":{"row":41,"column":36},"end":{"row":42,"column":0},"action":"insert","lines":["",""],"id":270},{"start":{"row":42,"column":0},"end":{"row":42,"column":12},"action":"insert","lines":["            "]},{"start":{"row":42,"column":12},"end":{"row":42,"column":13},"action":"insert","lines":["s"]},{"start":{"row":42,"column":13},"end":{"row":42,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":42,"column":14},"end":{"row":42,"column":15},"action":"insert","lines":["l"],"id":271},{"start":{"row":42,"column":15},"end":{"row":42,"column":16},"action":"insert","lines":["f"]}],[{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"insert","lines":[" "],"id":272}],[{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"remove","lines":[" "],"id":273}],[{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"insert","lines":["."],"id":274},{"start":{"row":42,"column":17},"end":{"row":42,"column":18},"action":"insert","lines":["a"]},{"start":{"row":42,"column":18},"end":{"row":42,"column":19},"action":"insert","lines":["s"]},{"start":{"row":42,"column":19},"end":{"row":42,"column":20},"action":"insert","lines":["s"]},{"start":{"row":42,"column":20},"end":{"row":42,"column":21},"action":"insert","lines":["e"]},{"start":{"row":42,"column":21},"end":{"row":42,"column":22},"action":"insert","lines":["r"]}],[{"start":{"row":42,"column":22},"end":{"row":42,"column":23},"action":"insert","lines":["t"],"id":275},{"start":{"row":42,"column":23},"end":{"row":42,"column":24},"action":"insert","lines":["I"]},{"start":{"row":42,"column":24},"end":{"row":42,"column":25},"action":"insert","lines":["n"]}],[{"start":{"row":42,"column":25},"end":{"row":42,"column":27},"action":"insert","lines":["()"],"id":276}],[{"start":{"row":42,"column":26},"end":{"row":42,"column":27},"action":"insert","lines":["l"],"id":277},{"start":{"row":42,"column":27},"end":{"row":42,"column":28},"action":"insert","lines":["e"]},{"start":{"row":42,"column":28},"end":{"row":42,"column":29},"action":"insert","lines":["t"]},{"start":{"row":42,"column":29},"end":{"row":42,"column":30},"action":"insert","lines":["t"]},{"start":{"row":42,"column":30},"end":{"row":42,"column":31},"action":"insert","lines":["e"]},{"start":{"row":42,"column":31},"end":{"row":42,"column":32},"action":"insert","lines":["r"]},{"start":{"row":42,"column":32},"end":{"row":42,"column":33},"action":"insert","lines":[","]}],[{"start":{"row":42,"column":33},"end":{"row":42,"column":34},"action":"insert","lines":[" "],"id":278},{"start":{"row":42,"column":34},"end":{"row":42,"column":35},"action":"insert","lines":["a"]},{"start":{"row":42,"column":35},"end":{"row":42,"column":36},"action":"insert","lines":["s"]},{"start":{"row":42,"column":36},"end":{"row":42,"column":37},"action":"insert","lines":["c"]},{"start":{"row":42,"column":37},"end":{"row":42,"column":38},"action":"insert","lines":["i"]},{"start":{"row":42,"column":38},"end":{"row":42,"column":39},"action":"insert","lines":["i"]}],[{"start":{"row":42,"column":39},"end":{"row":42,"column":40},"action":"insert","lines":["_"],"id":279},{"start":{"row":42,"column":40},"end":{"row":42,"column":41},"action":"insert","lines":["u"]},{"start":{"row":42,"column":41},"end":{"row":42,"column":42},"action":"insert","lines":["p"]},{"start":{"row":42,"column":42},"end":{"row":42,"column":43},"action":"insert","lines":["p"]},{"start":{"row":42,"column":43},"end":{"row":42,"column":44},"action":"insert","lines":["e"]},{"start":{"row":42,"column":44},"end":{"row":42,"column":45},"action":"insert","lines":["r"]},{"start":{"row":42,"column":45},"end":{"row":42,"column":46},"action":"insert","lines":["c"]},{"start":{"row":42,"column":46},"end":{"row":42,"column":47},"action":"insert","lines":["a"]},{"start":{"row":42,"column":47},"end":{"row":42,"column":48},"action":"insert","lines":["s"]},{"start":{"row":42,"column":48},"end":{"row":42,"column":49},"action":"insert","lines":["e"]}],[{"start":{"row":42,"column":50},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":280},{"start":{"row":43,"column":0},"end":{"row":43,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":12},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","        ","    def test_grid_is_filled_with_letters(self):","        ","        \"\"\"","        Ensure that each of the coordinates in the grid ","        contains letters","        ","        \"\"\"","        ","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","            "],"id":281},{"start":{"row":0,"column":0},"end":{"row":68,"column":73},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"]}],[{"start":{"row":0,"column":0},"end":{"row":68,"column":73},"action":"remove","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))"],"id":282},{"start":{"row":0,"column":0},"end":{"row":103,"column":4},"action":"insert","lines":["import unittest","import boggle","from string import ascii_uppercase","","","class TestBoggle(unittest.TestCase):","    \"\"\"","    Our test suite for boggle solver","    \"\"\"","","    def test_can_create_an_empty_grid(self):","        \"\"\"","        Test to see if we can create an empty grid","        \"\"\"","        grid = boggle.make_grid(0, 0)","        self.assertEqual(len(grid), 0)","    ","    def test_grid_size_width_times_height(self):","        \"\"\"","        Test is to ensure that the total size of the grid","        is equal to width * height","        \"\"\"","        grid = boggle.make_grid(2, 3)","        self.assertEqual(len(grid), 6)","    ","    def test_grid_coordinates(self):","        grid = boggle.make_grid(2, 2)","        self.assertIn((0, 0), grid)","        self.assertIn((0, 1), grid)","        self.assertIn((1, 0), grid)","        self.assertIn((1, 1), grid)","        self.assertNotIn((2, 2), grid)","    ","    def test_grid_is_filled_with_letters(self):","        \"\"\"","        Ensure that each of the coordinates in the grid","        contains letters","        \"\"\"","        grid = boggle.make_grid(2, 3)","        for letter in grid.values():","            self.assertIn(letter, ascii_uppercase)","    ","    def test_neighbours_of_a_position(self):","        \"\"\"","        Ensure that a position has 8 neighbours","        \"\"\"","        coords = (1, 2)","        neighbours = boggle.neighbours_of_position(coords)","        self.assertIn((0, 1), neighbours)","        self.assertIn((0, 2), neighbours)","        self.assertIn((0, 3), neighbours)","        self.assertIn((1, 1), neighbours)","        self.assertIn((1, 3), neighbours)","        self.assertIn((2, 1), neighbours)","        self.assertIn((2, 2), neighbours)","        self.assertIn((2, 3), neighbours)","    ","","    def test_all_grid_neighbours(self):","        \"\"\"","        Ensure that all of the grid positions have neighbours","        \"\"\"","        grid = boggle.make_grid(2, 2)","        neighbours = boggle.all_grid_neighbours(grid)","        self.assertEqual(len(neighbours), len(grid))","        for pos in grid:","            others = list(grid) # create a new list from the dictionary's keys","            others.remove(pos)","            self.assertListEqual(sorted(neighbours[pos]), sorted(others))","    ","    def test_converting_a_path_to_a_word(self):","        \"\"\"","        Ensure that paths can be converted to words","        \"\"\"","        grid = boggle.make_grid(2, 2)","        oneLetterWord = boggle.path_to_word(grid, [(0, 0)])","        twoLetterWord = boggle.path_to_word(grid, [(0, 0), (1, 1)])","        self.assertEqual(oneLetterWord, grid[(0, 0)])","        self.assertEqual(twoLetterWord, grid[(0, 0)] + grid[(1, 1)])","    ","    def test_search_grid_for_words(self):","        \"\"\"","        Ensure that certain patterns can be found in a `path_to_word`","        \"\"\"","        grid = {(0, 0): 'A', (0, 1): 'B', (1, 0): 'C', (1, 1): 'D'}","        twoLetterWord = 'AB'","        threeLetterWord = 'ABC'","        notThereWord = 'EEE'","        dictionary = [twoLetterWord, threeLetterWord, notThereWord]","","        foundWords = boggle.search(grid, dictionary)","","        self.assertTrue(twoLetterWord in foundWords)","        self.assertTrue(threeLetterWord in foundWords)","        self.assertTrue(notThereWord not in foundWords)","    ","    def test_load_dictionary(self):","        \"\"\"","        Test that the `get_dictionary` function returns a dictionary","        that has a length greater than 0","        \"\"\"","        dictionary = boggle.get_dictionary('words.txt')","        self.assertGreater(len(dictionary), 0)","    "]}]]},"ace":{"folds":[],"scrolltop":360,"scrollleft":0,"selection":{"start":{"row":18,"column":11},"end":{"row":18,"column":11},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":97,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1560771293509,"hash":"e4f4ebd4aaee166120683ddedbffcdc1d703b83e"}